;
; This is temporary, c_stdio_medium_for_printf.c may change.
; based on .nasm source file generated by soptcc.pl from c_stdio_medium_for_printf.c
; Compile to i386 ELF .o object: nasm -O999999999 -w+orphan-labels -f elf -o c_stdio_medium_for_printf.o c_stdio_medium_for_printf.nasm

bits 32
cpu 386

global mini_fflush
global mini___M_discard_buf
global mini___M_fputc_RP2
global mini___M_writebuf_relax_RP1
global mini___M_writebuf_unrelax_RP1
%ifdef CONFIG_SECTIONS_DEFINED
%elifidn __OUTPUT_FORMAT__, bin
section .text align=1
section .rodata align=1
section .data align=1
section .bss align=1
mini_write equ +0x12345678
%else
extern mini_write
section .text align=1
section .rodata align=4
section .data align=4
section .bss align=4
%endif

section .text

mini___M_discard_buf:
		mov eax, [esp+0x4]
		mov edx, [eax+0x18]
		mov [eax+0xc], edx
		mov [eax], edx
		mov [eax+0x8], edx
		mov dl, [eax+0x14]
		dec dl
		cmp dl, 0x2
		ja .1
		mov edx, [eax+0x4]
		mov [eax], edx
.1:		ret

mini_fflush:
		push esi
		or ecx, byte -0x1
		push ebx
		mov ebx, [esp+0xc]
		cmp byte [ebx+0x14], 0x3
		jbe .4
		mov esi, [ebx+0x18]
.6:		mov eax, [ebx]
		cmp eax, esi
		je .13
		sub eax, esi
		push eax
		push esi
		push dword [ebx+0x10]
		call mini_write
		add esp, byte 0xc
		lea edx, [eax+0x1]
		cmp edx, byte 0x1
		jbe .10
		add esi, eax
		jmp short .6
.13:		xor ecx, ecx
		jmp short .7
.10:		or ecx, byte -0x1
.7:		sub esi, [ebx+0x18]
		add [ebx+0x20], esi
		push ebx
		call mini___M_discard_buf
		pop eax
.4:		pop ebx
		mov eax, ecx
		pop esi
		ret

mini___M_fputc_RP2:
		push ebx
		mov ebx, edx
		push ecx
		mov [esp+0x3], al
		mov eax, [edx+0x4]
		cmp [edx], eax
		jne .16
		push edx
		call mini_fflush
		pop edx
		test eax, eax
		je .17
.20:		or eax, byte -0x1
		jmp short .14
.17:		mov eax, [ebx+0x4]
		cmp [ebx], eax
		jne .16
		push byte 1
		lea eax, [esp+0x7]
		push eax
		push dword [ebx+0x10]
		call mini_write
		add esp, byte 0xc
		dec eax
		jne .20
		inc dword [ebx+0x20]
.16:		mov eax, [ebx]
		lea edx, [eax+0x1]
		mov [ebx], edx
		mov dl, [esp+0x3]
		mov [eax], dl
		cmp byte [esp+0x3], 0xa
		jne .21
		cmp byte [ebx+0x14], 0x6
		jne .21
		push ebx
		call mini_fflush
		pop ecx
.21:		movzx eax, byte [esp+0x3]
.14:		pop edx
		pop ebx
		ret

mini___M_writebuf_relax_RP1:
		cmp byte [eax+0x14], 0x4
		jne .23
		mov edx, [eax+0x1c]
		mov ecx, [eax+0x4]
		cmp edx, ecx
		jbe .23
		mov byte [eax+0x14], 0x5
		mov [eax+0x1c], ecx
		mov [eax+0x4], edx
.23:		ret

mini___M_writebuf_unrelax_RP1:
		cmp byte [eax+0x14], 0x5
		jne .27
		push ebx
		mov ebx, eax
		push eax
		call mini_fflush
		mov edx, [ebx+0x1c]
		mov ecx, [ebx+0x4]
		xor byte [ebx+0x14], 0x1
		mov [ebx+0x4], edx
		mov [ebx+0x1c], ecx
		pop edx
		pop ebx
		ret
.27:		xor eax, eax
		ret

%ifdef CONFIG_PIC  ; Already position-independent code.
%endif
; __END__
