;
; based on .nasm source file generated by soptcc.pl from c_stdio_medium_fclose.c
; Compile to i386 ELF .o object: nasm -O999999999 -w+orphan-labels -f elf -o stdio_medium_fclose.o stdio_medium_fclose.nasm
;

bits 32
cpu 386

global mini_fclose
%ifdef CONFIG_SECTIONS_DEFINED
%elifidn __OUTPUT_FORMAT__, bin
section .text align=1
section .rodata align=1
section .data align=1
section .bss align=1
mini_close equ +0x12345678
mini_fflush equ +0x12345679
%else
extern mini_close
extern mini_fflush
section .text align=1
section .rodata align=1
section .data align=1
section .bss align=1
%endif

section .text

mini_fclose:
		push esi
		push ebx
		mov ebx, [esp+0xc]
		mov al, [ebx+0x14]
		or esi, byte -0x1
		test al, al
		je .1
		dec eax
		xor esi, esi
		cmp al, 0x2
		jbe .3
		push ebx
		call mini_fflush
		xchg esi, eax  ; ESI := EAX; EAX := junk.
		pop edx
.3:		push dword [ebx+0x10]
		call mini_close
		pop eax  ; Clean up argument of mini_close(...) from the stack.
		xor eax, eax  ; EAX := 0.
		mov [ebx+0x14], al  ; filep->dire = FD_CLOSED;
		dec eax
		mov [ebx+0x10], eax  ; filep->fd = EOF;
		mov eax, [ebx+4]
		mov [ebx], eax  ; filep->buf_write_ptr = filep->buf_end;  /* Sentinel for future calls to mini_fputc(..., filep). */
		mov eax, [ebx+0xc]
		mov [ebx+8], eax  ; filep->buf_read_ptr = filep->buf_last;  /* Sentinel for future calls to mini_fgetc(filep). */
.1:		xchg eax, esi  ; EAX := ESI; ESI := junk.
		pop ebx
		pop esi
		ret

%ifdef CONFIG_PIC  ; Already position-independent code.
%endif

; __END__
