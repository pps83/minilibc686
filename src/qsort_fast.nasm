;
; written by pts@fazekas.hu at pts@fazekas.hu at Thu Jun  1 02:48:00 CEST 2023
; nased on .nasm source file generated by soptcc.pl from fyi/qsort_fast.c
; Compile to i386 ELF .o object: nasm -O999999999 -w+orphan-labels -f elf -o qsort_fast.o qsort_fast.nasm
;
; Code size, including memswap: 0xb7 bytes for i686, 0xb8 bytes for i386.
;
; Uses: %ifdef CONFIG_PIC
; Uses: %ifdef CONFIG_I386
;

bits 32
%ifdef CONFIG_I386
cpu 386
%else
cpu 686
%endif

global mini_qsort_fast
%ifdef CONFIG_SECTIONS_DEFINED
%elifidn __OUTPUT_FORMAT__, bin
section .text align=1
section .rodata align=4
section .data align=4
section .bss align=4
%else
section .text align=1
section .rodata align=1
section .data align=1
section .bss align=1
%endif

section .text

; TODO(pts): Move this to a separate .nasm file and export it in <string.h>.
static_mini_memswap_RP3:  ; __attribute__((__regparm(3))) void static_mini_memswap_RP3(void *a, void *b, size_t size);
		push ebx
		;mov eax, ... ; Argument a.
		;mov edx, ...  ; Argument b.
		;mov ecx, ...  ; Argument size.
		jecxz .done
.again:		mov bl, [eax]
		xchg bl, [edx]
		mov [eax], bl
		inc eax
		inc edx
		loop .again
.done:		pop ebx
		ret

mini_qsort_fast:  ; void mini_qsort_fast(void *base, size_t n, size_t size, int (*cmp)(const void*, const void*));
; The code for i686 has been generated by the C compiler, see C source in fyi/qsort_fast.c.
		push ebp
		mov ebp, esp
		push edi
		push esi
		push ebx
		sub esp, byte 0xc
		mov eax, [ebp+0xc]
		mov ebx, [ebp+0x10]
		mov edx, eax
		shr edx, 0x1
		imul edx, ebx
		add edx, [ebp+0x8]
		mov [ebp-0x10], edx
		lea edx, [eax-0x1]
		imul edx, ebx
		add edx, [ebp+0x8]
		cmp eax, byte 0x1
		mov [ebp-0x14], edx
		jbe .7
.14:		mov eax, [ebp-0x10]
		cmp eax, [ebp+0x8]
		je .9
		sub [ebp-0x10], ebx
		jmp short .10
.9:		mov edi, [ebp-0x10]
		mov ecx, ebx
		mov edx, [ebp-0x14]
		mov eax, edi
		call static_mini_memswap_RP3
		sub [ebp-0x14], ebx
		cmp [ebp-0x14], edi
		je .7
.10:		mov edi, [ebp-0x10]
.13:		mov esi, edi
		sub esi, [ebp+0x8]
		add esi, ebx
		add esi, edi
		cmp esi, [ebp-0x14]
		ja .16
		jnb .12
		lea edx, [esi+ebx]
		push edx
		push esi
		mov [ebp-0x18], edx
		call [ebp+0x14]  ; cmp.
		pop edx
		mov edx, [ebp-0x18]
		pop ecx
		test eax, eax
%ifdef CONFIG_I386
		jns .skipmov
		mov esi, edx
.skipmov:
%else
		cmovs esi, edx
%endif
.12:		push esi
		push edi
		call [ebp+0x14]  ; cmp.
		pop edx
		pop ecx
		test eax, eax
		jns .16
		mov eax, edi
		mov ecx, ebx
		mov edx, esi
		mov edi, esi
		call static_mini_memswap_RP3
		jmp short .13
.16:		mov ecx, ebx
		mov edx, edi
		mov eax, edi
		call static_mini_memswap_RP3
		jmp short .14
.7:		lea esp, [ebp-0xc]
		pop ebx
		pop esi
		pop edi
		pop ebp
		ret

%ifdef CONFIG_PIC  ; Already position-independent code.
%endif

; __END__
