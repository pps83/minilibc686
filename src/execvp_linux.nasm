;
; .nasm source file generated by soptcc.pl from fyi/c_execvp_linux.c
; Compile to i386 ELF .o object: nasm -O999999999 -w+orphan-labels -f elf -o src/c_execvp_linux.o src/c_execvp_linux.nasm
;
; TODO(pts): Optimize this.
;

bits 32
cpu 386

global mini_execvp
%define RODATA .rodata
%ifdef CONFIG_SECTIONS_DEFINED
%elifidn __OUTPUT_FORMAT__, bin
section .text align=1
section RODATA align=1
section .data align=1
section .bss align=1
mini_environ equ +0x12345678
mini_errno equ +0x12345679
mini_execve equ +0x1234567a
%else
extern mini_environ
extern mini_errno
extern mini_execve
%define RODATA .rodata.str1.1
section .text align=1
section RODATA align=1
section .data align=1
section .bss align=1
%endif

PATH_MAX equ 4096
ENOENT equ 2
ENOEXEC equ 8
ENAMETOOLONG equ 36

section .text
mini_execvp:  ; int mini_execvp(const char *file, char *const argv[]);
		push ebp
		mov ebp, esp
		push edi
		push esi
		push ebx
		sub esp, byte 0xc
		xor edi, edi
.2:		lea eax, [edi+0x1]
		mov [ebp-0x14], eax
		mov eax, [ebp+0x8]
		cmp byte [eax+edi], 0x0
		je .74
		mov edi, [ebp-0x14]
		jmp short .2
.74:		mov edx, eax
.3:		mov al, [edx]
		test al, al
		je .4
		cmp al, '/'
		je near .75
		inc edx
		jmp short .3
.4:		mov ebx, [mini_environ]
		cmp dword [ebp-0x14], PATH_MAX
		jbe .11
		mov dword [mini_errno], ENAMETOOLONG
		jmp near .72
.77:		add ebx, byte 4
.11:		mov eax, [ebx]
		test eax, eax
		je .76
		mov esi, str_path
.15:		mov dl, [esi]
		mov cl, [eax]
		test dl, dl
		je .12
		cmp dl, cl
		jne .77
		inc esi
		inc eax
		jmp short .15
.76:		mov eax, str_defpath
.12:		mov edx, eax
		mov esi, 0x1
.16:		mov cl, [edx]
		cmp cl, ':'
		jne .78
		inc edx
		jmp short .16
.78:		test cl, cl
		je .18
		mov [ebp-0x10], edx
		mov ecx, edx
.19:		mov ebx, ecx
		sub ebx, [ebp-0x10]
		mov [ebp-0x18], ebx
		mov edx, ecx
		mov bl, [ecx]
		inc ecx
		cmp bl, ':'
		je .42
		test bl, bl
		jne .19
.42:		cmp esi, [ebp-0x18]
		jnb .16
		mov esi, [ebp-0x18]
		jmp short .16
.18:		lea edx, [esi+edi+0x2]
		cmp edx, PATH_MAX
		jbe .23
		mov edx, PATH_MAX
.23:		add edx, byte 0x12
		and edx, byte -4
		sub esp, edx  ; alloca(...).
		lea ebx, [esp+0xf]
		and ebx, byte -0x10
		mov [ebp-0x18], ebx
.24:		mov dl, [eax]
		cmp dl, ':'
		jne .79
		lea esi, [eax+0x1]
.29:		mov eax, esi
		jmp short .24
.79:		test dl, dl
		je near .26
		mov edi, eax
.27:		mov edx, edi
		sub edx, eax
		mov [ebp-0x10], edx
		mov esi, edi
		mov cl, [edi]
		inc edi
		test cl, cl
		je .43
		cmp cl, ':'
		jne .27
.43:		mov ecx, PATH_MAX
		sub ecx, [ebp-0x14]
		cmp [ebp-0x10], ecx
		jnb .29
		cmp dword [ebp-0x10], byte 0
		jne .41
		lea edx, [ebx+0x1]
		mov byte [ebx], '.'
		mov esi, eax
		jmp short .31
.41:		xor ecx, ecx
.30:		mov dl, [eax+ecx]
		mov [ebx+ecx], dl
		inc ecx
		cmp [ebp-0x10], ecx
		jne .30
		mov esi, [ebp-0x10]
		add esi, eax
		mov edx, [ebp-0x10]
		add edx, ebx
.31:		mov byte [edx], '/'
		xor eax, eax
.32:		mov edi, [ebp+0x8]
		mov cl, [edi+eax]
		mov [edx+eax+0x1], cl
		inc eax
		test cl, cl
		jne .32
		push dword [mini_environ]
		push dword [ebp+0xc]
		push ebx
		call mini_execve
		add esp, byte 0xc
		test eax, eax
		je .29
		mov eax, [mini_errno]
		cmp eax, byte ENOEXEC
		jne .80
.7:		xor eax, eax
.9:		lea edx, [eax+0x1]
		mov edi, [ebp+0xc]
		cmp dword [edi+edx*0x4-0x4], byte 0
		je .81
		mov eax, edx
		jmp short .9
.81:		lea eax, [eax*0x4+0x18]
		sub esp, eax  ; alloca(...) for shell_argv.
		lea eax, [esp+0xf]
		and eax, byte -0x10  ; TODO(pts): Avoid such alignments.
		dw 0xc7
		    dd str_binsh  ; `mov dword [eax], str_binsh', but `nasm -O0' would add 4 bytes of 0 diplacement.
		lea ebx, [eax+0x8]
		mov edi, [ebp-0x18]
		mov [eax+0x4], edi
		xor edx, edx
.10:		mov edi, [ebp+0xc]
		mov ecx, [edi+edx+0x4]
		mov [ebx+edx], ecx
		add edx, byte 4
		test ecx, ecx
		jne .10
		push dword [mini_environ]
		push eax
		push dword [eax]
		call mini_execve
		add esp, byte 0xc
		jmp short .1
.80:		cmp eax, byte 0x14
		ja .72
		mov edx, 0x102004  ; Bit set of EACCES, ENOENT, ENOTDIR.
		bt edx, eax
		jc .29
		jmp short .72
.26:		mov dword [mini_errno], ENOENT
.72:		or eax, byte -1
		jmp short .1
.75:		push dword [mini_environ]
		push dword [ebp+0xc]
		push dword [ebp+0x8]
		call mini_execve
		add esp, byte 0xc
		test eax, eax
		je .1
		mov eax, [ebp+0x8]
		mov [ebp-0x18], eax
		cmp dword [mini_errno], byte ENOEXEC
		je .7
		jmp short .72
.1:		lea esp, [ebp-0xc]
		pop ebx
		pop esi
		pop edi
		pop ebp
		ret

section RODATA
str_path:	db 'PATH=', 0
str_defpath:	db '/bin:/usr/bin', 0
str_binsh:	db '/bin/sh', 0

%ifdef CONFIG_PIC
%error Not PIC because it uses global variables and constants.
times 1/0 nop
%endif

; __END__
