;
; based on .nasm source file generated by soptcc.pl from c_stdio_medium_fwrite.c
; Compile to i386 ELF .o object: nasm -O999999999 -w+orphan-labels -f elf -o c_stdio_medium_fwrite.o c_stdio_medium_fwrite.nasm
;

bits 32
cpu 386

global mini_fwrite
%ifdef CONFIG_SECTIONS_DEFINED
%elifidn __OUTPUT_FORMAT__, bin
section .text align=1
section .rodata align=1
section .data align=1
section .bss align=1
mini_write equ +0x12345678
mini_fflush equ +0x12345679
%else
extern mini_write
extern mini_fflush
section .text align=1
section .rodata align=1
section .data align=1
section .bss align=1
%endif

section .text

mini_fwrite:
		push ebp
		push edi
		push esi
		push ebx
		push ebx
		mov ebp, [esp+0x18]
		mov esi, [esp+0x24]
		mov edi, [esp+0x1c]
		imul edi, [esp+0x20]
		mov al, [esi+0x14]
		test edi, edi
		je near .20
		cmp al, 0x3
		jbe near .20
		mov edx, [esi+0x4]
		mov ecx, [esi+0x18]
		cmp edx, ecx
		je near .21
		cmp al, 0x6
		jne .4
		lea eax, [ebp+edi+0x0]
		mov [esp], eax
		mov edi, eax
.5:		cmp edi, ebp
		je .6
		cmp byte [edi-0x1], 0xa
		je .6
		dec edi
		jmp short .5
.6:		mov ebx, ebp
.13:		mov eax, [esi+0x4]
		cmp [esi], eax
		je .8
.12:		inc ebx
		mov ecx, [esi]
		lea eax, [ecx+0x1]
		mov [esi], eax
		mov al, [ebx-0x1]
		mov [ecx], al
		cmp ebx, edi
		jne .10
		jmp short .38
.8:		push esi
		call mini_fflush
		pop ecx
		test eax, eax
		je .12
		jmp short .11
.38:		push esi
		call mini_fflush
		pop edx
		test eax, eax
		jne .11
.10:		cmp [esp], ebx
		jne .13
		jmp short .11
.4:		mov ebx, ebp
		cmp ecx, [esi]
		jne .16
		sub edx, ecx
		cmp edx, edi
		jbe .15
		jmp short .16
.17:		inc ebx
		lea eax, [edx+0x1]
		mov [esi], eax
		mov al, [ebx-0x1]
		mov [edx], al
		dec edi
		je .11
.16:		mov edx, [esi]
		cmp edx, [esi+0x4]
		jne .17
.15:		push esi
		call mini_fflush
		pop ecx
		test eax, eax
		je .18
		jmp short .11
.21:		mov ebx, ebp
.18:		push edi
		push ebx
		push dword [esi+0x10]
		call mini_write
		lea edx, [eax+0x1]
		add esp, byte 0xc
		cmp edx, byte 1
		jbe .11
		add ebx, eax
		add [esi+0x20], eax
		sub edi, eax
		jne .18
.11:		mov eax, ebx
		sub eax, ebp
		xor edx, edx
		div dword [esp+0x1c]
		jmp short .1
.20:		xor eax, eax
.1:		pop edx
		pop ebx
		pop esi
		pop edi
		pop ebp
		ret

%ifdef CONFIG_PIC  ; Already position-independent code.
%endif

; __END__
