;
; based on .nasm source file generated by soptcc.pl from c_strtold.c
; Compile to i386 ELF .o object: nasm -O999999999 -w+orphan-labels -f elf -o strtold.o strtold.nasm

; Uses: %ifdef CONFIG_PIC
;
; !! TODO(pts): Optimize manually for size.
;

bits 32
cpu 386

%ifdef __UCLIBC__
  %define mini_errno __errno_location
  %ifndef mini_strtold
    %define mini_strtold strtold
  %endif
%endif

global mini_strtold
%ifidn __OUTPUT_FORMAT__, bin
section .text align=1
section .rodata align=1
section .data align=1
section .bss align=1
mini_errno equ +0x12345679
%else
section .text align=1
section .rodata align=4
section .data align=4
section .bss align=4
extern mini_errno
%endif

%ifdef __UCLIBC__
  %macro set_errno 1
		push eax
		call __errno_location
		mov dword [eax], %1
		pop eax
  %endm
%else
  %macro set_errno 1
		mov dword [mini_errno], %1
  %endm
%endif

section .text

; TODO(pts): Add it in separate .nasm file.
my_ldexpl:  ; long double my_ldexpl(long double x, int exp);
		fild dword [esp+0x10]
		fld tword [esp+4]
		fscale
		fstp st1
		ret

; TODO(pts): Add it in separate .nasm file.
my_fmodl:  ; long double fmodl(long double x, long double y);
		fld tword [esp+0x10]
		fld tword [esp+4]
.again:		fprem
		fnstsw ax
		sahf
		jp .again
		fstp st1
		ret

scanexp:  ; static int32_t scanexp(struct sfile *f);
		push ebp
		mov ebp, esp
		sub esp, byte 0xc
		mov dword [ebp-0xc], 0x0
		mov eax, [ebp+0x8]
		mov eax, [eax]
		lea ecx, [eax+0x1]
		mov edx, [ebp+0x8]
		mov [edx], ecx
		mov al, [eax]
		mov [ebp-0x1], al
		cmp byte [ebp-0x1], 0x2b
		je .6
		cmp byte [ebp-0x1], 0x2d
		jne .7
.6:		cmp byte [ebp-0x1], 0x2d
		sete al
		movzx eax, al
		mov [ebp-0xc], eax
		mov eax, [ebp+0x8]
		mov eax, [eax]
		lea ecx, [eax+0x1]
		mov edx, [ebp+0x8]
		mov [edx], ecx
		mov al, [eax]
		mov [ebp-0x1], al
		movzx eax, byte [ebp-0x1]
		sub eax, byte 0x30
		cmp eax, byte 0x9
		jbe .7
		mov eax, [ebp+0x8]
		mov eax, [eax]
		lea edx, [eax-0x1]
		mov eax, [ebp+0x8]
		mov [eax], edx
.7:		movzx eax, byte [ebp-0x1]
		sub eax, byte 0x30
		cmp eax, byte 0x9
		jbe .8
		mov eax, [ebp+0x8]
		mov eax, [eax]
		lea edx, [eax-0x1]
		mov eax, [ebp+0x8]
		mov [eax], edx
		mov eax, [ebp+0x8]
		mov eax, [eax]
		lea edx, [eax-0x1]
		mov eax, [ebp+0x8]
		mov [eax], edx
		mov eax, 0x0
		jmp near .9
.8:		mov dword [ebp-0x8], 0x0
		jmp short .10
.12:		mov edx, [ebp-0x8]
		mov eax, edx
		sal eax, 0x2
		add eax, edx
		add eax, eax
		mov edx, eax
		movzx eax, byte [ebp-0x1]
		add eax, edx
		sub eax, byte 0x30
		mov [ebp-0x8], eax
		mov eax, [ebp+0x8]
		mov eax, [eax]
		lea ecx, [eax+0x1]
		mov edx, [ebp+0x8]
		mov [edx], ecx
		mov al, [eax]
		mov [ebp-0x1], al
.10:		movzx eax, byte [ebp-0x1]
		sub eax, byte 0x30
		cmp eax, byte 0x9
		ja .13
		cmp dword [ebp-0x8], 0xccccccb
		jbe .12
		jmp short .13
.14:		mov eax, [ebp+0x8]
		mov eax, [eax]
		lea ecx, [eax+0x1]
		mov edx, [ebp+0x8]
		mov [edx], ecx
		mov al, [eax]
		mov [ebp-0x1], al
.13:		movzx eax, byte [ebp-0x1]
		sub eax, byte 0x30
		cmp eax, byte 0x9
		jbe .14
		mov eax, [ebp+0x8]
		mov eax, [eax]
		lea edx, [eax-0x1]
		mov eax, [ebp+0x8]
		mov [eax], edx
		cmp dword [ebp-0xc], byte 0x0
		je .15
		mov eax, [ebp-0x8]
		neg eax
		jmp short .9
.15:		mov eax, [ebp-0x8]
.9:		leave
		ret

decfloat:  ; static long double decfloat(struct sfile *f, int c, int sign);
		lea ecx, [esp+0x4]
		and esp, byte -0x8  ; !! TODO(pts) Don't align.
		push dword [ecx-0x4]
		push ebp
		mov ebp, esp
		push edi
		push esi
		push ebx
		push ecx
		sub esp, 0x20b0  ; !! TODO(pts): Why this huge stack usage? Can we do without it?
		mov ebx, ecx
		mov dword [ebp-0x14], 0x40
		mov dword [ebp-0x30], 0x0
		mov dword [ebp-0x2c], 0x0
		mov dword [ebp-0x38], 0x0
		mov dword [ebp-0x34], 0x0
		mov dword [ebp-0x3c], 0x0
		mov dword [ebp-0x40], 0x0
		mov dword [ebp-0x44], 0x0
		mov dword [ebp-0x50], 0x0
		fldz
		fstp tword [ebp-0x68]
		fldz
		fstp tword [ebp-0x74]
		mov dword [ebp-0x1c], 0x0
		mov dword [ebp-0x20], 0x0
		jmp short .18
.19:		mov dword [ebp-0x40], 0x1
		mov eax, [ebx]
		mov eax, [eax]
		lea ecx, [eax+0x1]
		mov edx, [ebx]
		mov [edx], ecx
		mov al, [eax]
		movsx eax, al
		mov [ebx+0x4], eax
.18:		cmp dword [ebx+0x4], byte 0x30
		je .19
		cmp dword [ebx+0x4], byte 0x2e
		jne .20
		mov dword [ebp-0x44], 0x1
		mov eax, [ebx]
		mov eax, [eax]
		lea ecx, [eax+0x1]
		mov edx, [ebx]
		mov [edx], ecx
		mov al, [eax]
		movsx eax, al
		mov [ebx+0x4], eax
		jmp short .21
.22:		mov dword [ebp-0x40], 0x1
		add dword [ebp-0x30], byte -0x1
		adc dword [ebp-0x2c], byte -0x1
		mov eax, [ebx]
		mov eax, [eax]
		lea ecx, [eax+0x1]
		mov edx, [ebx]
		mov [edx], ecx
		mov al, [eax]
		movsx eax, al
		mov [ebx+0x4], eax
.21:		cmp dword [ebx+0x4], byte 0x30
		je .22
.20:		mov dword [ebp-0x20b4], 0x0
		jmp near .23
.33:		cmp dword [ebx+0x4], byte 0x2e
		jne .24
		cmp dword [ebp-0x44], byte 0x0
		jne near .115
		mov dword [ebp-0x44], 0x1
		mov eax, [ebp-0x38]
		mov edx, [ebp-0x34]
		mov [ebp-0x30], eax
		mov [ebp-0x2c], edx
		jmp near .27
.24:		cmp dword [ebp-0x20], 0x7fc
		jg near .28
		add dword [ebp-0x38], byte 0x1
		adc dword [ebp-0x34], byte 0x0
		cmp dword [ebx+0x4], byte 0x30
		je .29
		mov eax, [ebp-0x38]
		mov [ebp-0x3c], eax
.29:		cmp dword [ebp-0x1c], byte 0x0
		je .30
		mov eax, [ebp-0x20]
		mov edx, [ebp+eax*0x4-0x20b4]
		mov eax, edx
		sal eax, 0x2
		add eax, edx
		add eax, eax
		mov edx, eax
		mov eax, [ebx+0x4]
		add eax, edx
		lea edx, [eax-0x30]
		mov eax, [ebp-0x20]
		mov [ebp+eax*0x4-0x20b4], edx
		jmp short .31
.30:		mov eax, [ebx+0x4]
		sub eax, byte 0x30
		mov edx, eax
		mov eax, [ebp-0x20]
		mov [ebp+eax*0x4-0x20b4], edx
.31:		inc dword [ebp-0x1c]
		cmp dword [ebp-0x1c], byte 0x9
		jne .32
		inc dword [ebp-0x20]
		mov dword [ebp-0x1c], 0x0
.32:		mov dword [ebp-0x40], 0x1
		jmp short .27
.28:		add dword [ebp-0x38], byte 0x1
		adc dword [ebp-0x34], byte 0x0
		cmp dword [ebx+0x4], byte 0x30
		je .27
		mov dword [ebp-0x3c], 0x47dc
		mov eax, [ebp-0xc4]
		or eax, byte 0x1
		mov [ebp-0xc4], eax
.27:		mov eax, [ebx]
		mov eax, [eax]
		lea ecx, [eax+0x1]
		mov edx, [ebx]
		mov [edx], ecx
		mov al, [eax]
		movsx eax, al
		mov [ebx+0x4], eax
.23:		mov eax, [ebx+0x4]
		sub eax, byte 0x30
		cmp eax, byte 0x9
		jbe .33
		cmp dword [ebx+0x4], byte 0x2e
		je .33
		jmp short .26
.115:
.26:		cmp dword [ebp-0x44], byte 0x0
		jne .34
		mov eax, [ebp-0x38]
		mov edx, [ebp-0x34]
		mov [ebp-0x30], eax
		mov [ebp-0x2c], edx
.34:		cmp dword [ebp-0x40], byte 0x0
		je .35
		mov eax, [ebx+0x4]
		or eax, byte 0x20
		cmp eax, byte 0x65
		jne .35
		push dword [ebx]
		call scanexp
		add esp, byte 0x4
		cdq
		add [ebp-0x30], eax
		adc [ebp-0x2c], edx
		jmp short .36
.35:		cmp dword [ebx+0x4], byte 0x0
		js .36
		mov eax, [ebx]
		mov eax, [eax]
		lea edx, [eax-0x1]
		mov eax, [ebx]
		mov [eax], edx
.36:		cmp dword [ebp-0x40], byte 0x0
		jne .37
		set_errno 0x16
		mov eax, [ebx]
		mov edx, [eax+0x4]
		mov eax, [ebx]
		mov [eax], edx
		fldz
		jmp near .108
.37:		mov eax, [ebp-0x20b4]
		test eax, eax
		jne .39
		fild dword [ebx+0x8]
		fldz
		fmulp st1, st0
		jmp near .108
.39:		mov eax, [ebp-0x30]
		mov edx, [ebp-0x2c]
		mov ecx, edx
		xor ecx, [ebp-0x34]
		xor eax, [ebp-0x38]
		or eax, ecx
		test eax, eax
		jne .40
		cmp dword [ebp-0x34], byte 0x0
		jg .40
		cmp dword [ebp-0x34], byte 0x0
		js .109
		cmp dword [ebp-0x38], byte 0x9
		ja .40
.109:		cmp dword [ebp-0x14], byte 0x1e
		jg .42
		mov edx, [ebp-0x20b4]
		mov eax, [ebp-0x14]
		mov cl, al
		shr edx, cl
		mov eax, edx
		test eax, eax
		jne .40
.42:		fild dword [ebx+0x8]
		mov eax, [ebp-0x20b4]
		mov [ebp-0x20c0], eax
		mov dword [ebp-0x20bc], 0x0
		fild qword [ebp-0x20c0]
		fmulp st1, st0
		jmp near .108
.40:		cmp dword [ebp-0x2c], byte 0x0
		js .43
		cmp dword [ebp-0x2c], byte 0x0
		jg .116
		cmp dword [ebp-0x30], 0x201e
		jbe .43
.116:
.45:		set_errno 0x22
		fild dword [ebx+0x8]
		fld tword [const3]
		fmulp st1, st0
		fld tword [const3]
		fmulp st1, st0
		jmp near .108
.43:		cmp dword [ebp-0x2c], byte -0x1
		jg .46
		cmp dword [ebp-0x2c], byte -0x1
		jl .110
		cmp dword [ebp-0x30], -0x40bd
		jnb .46
.110:		set_errno 0x22
		fild dword [ebx+0x8]
		fld tword [const4]
		fmulp st1, st0
		fld tword [const4]
		fmulp st1, st0
		jmp near .108
.46:		cmp dword [ebp-0x1c], byte 0x0
		je .48
		jmp short .49
.50:		mov eax, [ebp-0x20]
		mov edx, [ebp+eax*0x4-0x20b4]
		mov eax, edx
		sal eax, 0x2
		add eax, edx
		add eax, eax
		mov edx, eax
		mov eax, [ebp-0x20]
		mov [ebp+eax*0x4-0x20b4], edx
		inc dword [ebp-0x1c]
.49:		cmp dword [ebp-0x1c], byte 0x8
		jle .50
		inc dword [ebp-0x20]
		mov dword [ebp-0x1c], 0x0
.48:		mov dword [ebp-0x24], 0x0
		mov eax, [ebp-0x20]
		mov [ebp-0x28], eax
		mov dword [ebp-0x4c], 0x0
		mov eax, [ebp-0x30]
		mov [ebp-0x48], eax
		cmp dword [ebp-0x3c], byte 0x8
		jg near .55
		mov eax, [ebp-0x3c]
		cmp eax, [ebp-0x48]
		jg near .55
		cmp dword [ebp-0x48], byte 0x11
		jg near .55
		cmp dword [ebp-0x48], byte 0x9
		jne .52
		fild dword [ebx+0x8]
		mov eax, [ebp-0x20b4]
		mov [ebp-0x20c0], eax
		mov dword [ebp-0x20bc], 0x0
		fild qword [ebp-0x20c0]
		fmulp st1, st0
		jmp near .108
.52:		cmp dword [ebp-0x48], byte 0x8
		jg .53
		fild dword [ebx+0x8]
		mov eax, [ebp-0x20b4]
		mov [ebp-0x20c0], eax
		mov dword [ebp-0x20bc], 0x0
		fild qword [ebp-0x20c0]
		fmulp st1, st0
		mov eax, 0x8
		sub eax, [ebp-0x48]
		mov eax, [+eax*0x4+p10s.989]
		mov [ebp-0x20c0], eax
		fild dword [ebp-0x20c0]
		fdivp st1, st0
		jmp near .108
.53:		mov eax, [ebp-0x48]
		sub eax, byte 0x9
		mov edx, eax
		add edx, edx
		add eax, edx
		neg eax
		mov edx, [ebp-0x14]
		add eax, edx
		mov [ebp-0x88], eax
		cmp dword [ebp-0x88], byte 0x1e
		jg .54
		mov edx, [ebp-0x20b4]
		mov eax, [ebp-0x88]
		mov cl, al
		shr edx, cl
		mov eax, edx
		test eax, eax
		jne .55
.54:		fild dword [ebx+0x8]
		mov eax, [ebp-0x20b4]
		mov [ebp-0x20c0], eax
		mov dword [ebp-0x20bc], 0x0
		fild qword [ebp-0x20c0]
		fmulp st1, st0
		mov eax, [ebp-0x48]
		sub eax, byte 0xa
		mov eax, [+eax*0x4+p10s.989]
		mov [ebp-0x20c0], eax
		fild dword [ebp-0x20c0]
		fmulp st1, st0
		jmp near .108
.56:		dec dword [ebp-0x28]
.55:		mov eax, [ebp-0x28]
		dec eax
		mov eax, [ebp+eax*0x4-0x20b4]
		test eax, eax
		je .56
		mov eax, [ebp-0x48]
		mov ecx, 0x9
		cdq
		idiv ecx
		mov eax, edx
		test eax, eax
		je near .64
		cmp dword [ebp-0x48], byte 0x0
		js .58
		mov eax, [ebp-0x48]
		mov ecx, 0x9
		cdq
		idiv ecx
		mov eax, edx
		jmp short .59
.58:		mov eax, [ebp-0x48]
		mov ecx, 0x9
		cdq
		idiv ecx
		mov eax, edx
		add eax, byte 0x9
.59:		mov [ebp-0x8c], eax
		mov eax, 0x8
		sub eax, [ebp-0x8c]
		mov eax, [+eax*0x4+p10s.989]
		mov [ebp-0x90], eax
		mov dword [ebp-0x78], 0x0
		mov eax, [ebp-0x24]
		mov [ebp-0x20], eax
		jmp near .60
.62:		mov eax, [ebp-0x20]
		mov eax, [ebp+eax*0x4-0x20b4]
		mov ecx, [ebp-0x90]
		mov edx, 0x0
		div ecx
		mov [ebp-0x94], edx
		mov eax, [ebp-0x20]
		mov eax, [ebp+eax*0x4-0x20b4]
		mov edi, [ebp-0x90]
		mov edx, 0x0
		div edi
		mov edx, eax
		mov eax, [ebp-0x78]
		add edx, eax
		mov eax, [ebp-0x20]
		mov [ebp+eax*0x4-0x20b4], edx
		mov eax, 0x3b9aca00
		cdq
		idiv dword [ebp-0x90]
		mov edx, eax
		mov eax, [ebp-0x94]
		imul eax, edx
		mov [ebp-0x78], eax
		mov eax, [ebp-0x20]
		cmp eax, [ebp-0x24]
		jne .61
		mov eax, [ebp-0x20]
		mov eax, [ebp+eax*0x4-0x20b4]
		test eax, eax
		jne .61
		mov eax, [ebp-0x24]
		inc eax
		and eax, 0x7ff
		mov [ebp-0x24], eax
		sub dword [ebp-0x48], byte 0x9
.61:		inc dword [ebp-0x20]
.60:		mov eax, [ebp-0x20]
		cmp eax, [ebp-0x28]
		jne .62
		cmp dword [ebp-0x78], byte 0x0
		je .63
		mov eax, [ebp-0x28]
		lea edx, [eax+0x1]
		mov [ebp-0x28], edx
		mov edx, [ebp-0x78]
		mov [ebp+eax*0x4-0x20b4], edx
.63:		mov eax, 0x9
		sub eax, [ebp-0x8c]
		add [ebp-0x48], eax
		jmp near .64
.73:		mov dword [ebp-0x7c], 0x0
		sub dword [ebp-0x4c], byte 0x1d
		mov eax, [ebp-0x28]
		dec eax
		and eax, 0x7ff
		mov [ebp-0x20], eax
.71:		mov eax, [ebp-0x20]
		mov eax, [ebp+eax*0x4-0x20b4]
		mov esi, eax
		mov edi, 0x0
		mov eax, esi
		mov edx, edi
		shld dword edx, eax, 0x1d
		sal eax, 0x1d
		mov esi, [ebp-0x7c]
		mov edi, 0x0
		add eax, esi
		adc edx, edi
		mov [ebp-0xa8], eax
		mov [ebp-0xa4], edx
		cmp dword [ebp-0xa4], byte 0x0
		jb .65
		cmp dword [ebp-0xa4], byte 0x0
		ja .111
		cmp dword [ebp-0xa8], 0x3b9aca00
		jbe .65
.111:		mov ecx, [ebp-0xa8]
		mov eax, [ebp-0xa8]
		mov edx, [ebp-0xa4]
		mov eax, edx
		xor edx, edx
		mov esi, eax
		mov edi, edx
		mov edx, esi
		mov esi, 0x3b9aca00
		mov eax, ecx
		div esi
		mov [ebp-0x7c], eax
		mov eax, [ebp-0x20]
		mov [ebp+eax*0x4-0x20b4], edx
		jmp short .67
.65:		mov dword [ebp-0x7c], 0x0
		mov edx, [ebp-0xa8]
		mov eax, [ebp-0x20]
		mov [ebp+eax*0x4-0x20b4], edx
.67:		mov eax, [ebp-0x28]
		dec eax
		and eax, 0x7ff
		cmp [ebp-0x20], eax
		jne .68
		mov eax, [ebp-0x20]
		cmp eax, [ebp-0x24]
		je .68
		mov eax, [ebp-0x20]
		mov eax, [ebp+eax*0x4-0x20b4]
		test eax, eax
		jne .68
		mov eax, [ebp-0x20]
		mov [ebp-0x28], eax
.68:		mov eax, [ebp-0x20]
		cmp eax, [ebp-0x24]
		je .117
		mov eax, [ebp-0x20]
		dec eax
		and eax, 0x7ff
		mov [ebp-0x20], eax
		jmp near .71
.117:		cmp dword [ebp-0x7c], byte 0x0
		je .64
		add dword [ebp-0x48], byte 0x9
		mov eax, [ebp-0x24]
		dec eax
		and eax, 0x7ff
		mov [ebp-0x24], eax
		mov eax, [ebp-0x24]
		cmp eax, [ebp-0x28]
		jne .72
		mov eax, [ebp-0x28]
		dec eax
		and eax, 0x7ff
		mov [ebp-0x28], eax
		mov eax, [ebp-0x28]
		dec eax
		and eax, 0x7ff
		mov ecx, [ebp+eax*0x4-0x20b4]
		mov eax, [ebp-0x28]
		mov edx, [ebp+eax*0x4-0x20b4]
		mov eax, [ebp-0x28]
		dec eax
		and eax, 0x7ff
		or edx, ecx
		mov [ebp+eax*0x4-0x20b4], edx
.72:		mov eax, [ebp-0x24]
		mov edx, [ebp-0x7c]
		mov [ebp+eax*0x4-0x20b4], edx
.64:		cmp dword [ebp-0x48], byte 0x1a
		jle .73
		cmp dword [ebp-0x48], byte 0x1b
		jne .89
		mov eax, [ebp-0x24]
		mov edx, [ebp+eax*0x4-0x20b4]
		mov eax, [th.972]
		cmp edx, eax
		jb .73
.89:		mov dword [ebp-0x80], 0x0
		mov dword [ebp-0x84], 0x1
		mov dword [ebp-0x18], 0x0
		jmp short .75
.80:		mov edx, [ebp-0x24]
		mov eax, [ebp-0x18]
		add eax, edx
		and eax, 0x7ff
		mov [ebp-0x20], eax
		mov eax, [ebp-0x20]
		cmp eax, [ebp-0x28]
		je .76
		mov eax, [ebp-0x20]
		mov edx, [ebp+eax*0x4-0x20b4]
		mov eax, [ebp-0x18]
		mov eax, [+eax*0x4+th.972]
		cmp edx, eax
		jnb .77
.76:		mov dword [ebp-0x18], 0x3
		jmp short .78
.77:		mov edx, [ebp-0x24]
		mov eax, [ebp-0x18]
		add eax, edx
		and eax, 0x7ff
		mov edx, [ebp+eax*0x4-0x20b4]
		mov eax, [ebp-0x18]
		mov eax, [+eax*0x4+th.972]
		cmp edx, eax
		ja .118
		inc dword [ebp-0x18]
.75:		cmp dword [ebp-0x18], byte 0x2
		jle .80
		jmp short .78
.118:
.78:		cmp dword [ebp-0x18], byte 0x3
		jne .81
		cmp dword [ebp-0x48], byte 0x1b
		je near .119
.81:		cmp dword [ebp-0x48], byte 0x24
		jle .83
		mov dword [ebp-0x84], 0x9
.83:		mov eax, [ebp-0x84]
		add [ebp-0x4c], eax
		mov eax, [ebp-0x24]
		mov [ebp-0x20], eax
		jmp near .84
.86:		mov eax, [ebp-0x20]
		mov edx, [ebp+eax*0x4-0x20b4]
		mov eax, [ebp-0x84]
		mov esi, 0x1
		mov cl, al
		sal esi, cl
		mov eax, esi
		dec eax
		and eax, edx
		mov [ebp-0x9c], eax
		mov eax, [ebp-0x20]
		mov edx, [ebp+eax*0x4-0x20b4]
		mov eax, [ebp-0x84]
		mov cl, al
		shr edx, cl
		mov eax, [ebp-0x80]
		add edx, eax
		mov eax, [ebp-0x20]
		mov [ebp+eax*0x4-0x20b4], edx
		mov eax, [ebp-0x84]
		mov edx, 0x3b9aca00
		mov cl, al
		sar edx, cl
		mov eax, edx
		mov edx, eax
		mov eax, [ebp-0x9c]
		imul eax, edx
		mov [ebp-0x80], eax
		mov eax, [ebp-0x20]
		cmp eax, [ebp-0x24]
		jne .85
		mov eax, [ebp-0x20]
		mov eax, [ebp+eax*0x4-0x20b4]
		test eax, eax
		jne .85
		mov eax, [ebp-0x24]
		inc eax
		and eax, 0x7ff
		mov [ebp-0x24], eax
		dec dword [ebp-0x18]
		sub dword [ebp-0x48], byte 0x9
.85:		mov eax, [ebp-0x20]
		inc eax
		and eax, 0x7ff
		mov [ebp-0x20], eax
.84:		mov eax, [ebp-0x20]
		cmp eax, [ebp-0x28]
		jne .86
		cmp dword [ebp-0x80], byte 0x0
		je .89
		mov eax, [ebp-0x28]
		inc eax
		and eax, 0x7ff
		cmp [ebp-0x24], eax
		je .88
		mov eax, [ebp-0x28]
		mov edx, [ebp-0x80]
		mov [ebp+eax*0x4-0x20b4], edx
		mov eax, [ebp-0x28]
		inc eax
		and eax, 0x7ff
		mov [ebp-0x28], eax
		jmp near .89
.88:		mov eax, [ebp-0x28]
		dec eax
		and eax, 0x7ff
		mov edx, [ebp+eax*0x4-0x20b4]
		mov eax, [ebp-0x28]
		dec eax
		and eax, 0x7ff
		or edx, byte 0x1
		mov [ebp+eax*0x4-0x20b4], edx
		jmp near .89
.119:		mov dword [ebp-0x18], 0x0
		fldz
		fstp tword [ebp-0x5c]
		jmp short .90
.92:		mov edx, [ebp-0x24]
		mov eax, [ebp-0x18]
		add eax, edx
		and eax, 0x7ff
		cmp [ebp-0x28], eax
		jne .91
		mov eax, [ebp-0x28]
		inc eax
		and eax, 0x7ff
		mov [ebp-0x28], eax
		mov eax, [ebp-0x28]
		dec eax
		mov dword [ebp+eax*0x4-0x20b4], 0x0
.91:		fld tword [ebp-0x5c]
		fld tword [const5]
		fmulp st1, st0
		mov edx, [ebp-0x24]
		mov eax, [ebp-0x18]
		add eax, edx
		and eax, 0x7ff
		mov eax, [ebp+eax*0x4-0x20b4]
		mov [ebp-0x20c0], eax
		mov dword [ebp-0x20bc], 0x0
		fild qword [ebp-0x20c0]
		faddp st1, st0
		fstp tword [ebp-0x5c]
		inc dword [ebp-0x18]
.90:		cmp dword [ebp-0x18], byte 0x2
		jle .92
		fild dword [ebx+0x8]
		fld tword [ebp-0x5c]
		fmulp st1, st0
		fstp tword [ebp-0x5c]
		mov eax, [ebp-0x4c]
		add eax, 0x407d
		cmp [ebp-0x14], eax
		jle .93
		mov eax, [ebp-0x4c]
		add eax, 0x407d
		mov [ebp-0x14], eax
		cmp dword [ebp-0x14], byte 0x0
		jns .94
		mov dword [ebp-0x14], 0x0
.94:		mov dword [ebp-0x50], 0x1
.93:		cmp dword [ebp-0x14], byte 0x3f
		jg near .95
		mov eax, 0x7f
		sub eax, [ebp-0x14]
		push eax
		fld1
		lea esp, [esp-0xc]
		fstp tword [esp]
		call my_ldexpl
		add esp, byte 0x10
		fstp tword [ebp-0x20c0]
		mov eax, [ebp-0x20c0]
		mov edx, [ebp-0x20bc]
		mov ecx, [ebp-0x20b8]
		mov [ebp-0x74], eax
		mov [ebp-0x70], edx
		mov [ebp-0x6c], ecx
		cmp dword [ebx+0x8], byte 0x0
		jns .96
		fld tword [ebp-0x74]
		fchs
		fstp tword [ebp-0x74]
.96:		mov eax, 0x40
		sub eax, [ebp-0x14]
		push eax
		fld1
		lea esp, [esp-0xc]
		fstp tword [esp]
		call my_ldexpl
		add esp, byte 0x10
		lea esp, [esp-0xc]
		fstp tword [esp]
		push dword [ebp-0x54]
		push dword [ebp-0x58]
		push dword [ebp-0x5c]
		call my_fmodl
		add esp, byte 0x18
		fstp tword [ebp-0x20c0]
		mov eax, [ebp-0x20c0]
		mov edx, [ebp-0x20bc]
		mov ecx, [ebp-0x20b8]
		mov [ebp-0x68], eax
		mov [ebp-0x64], edx
		mov [ebp-0x60], ecx
		fld tword [ebp-0x5c]
		fld tword [ebp-0x68]
		fsubp st1, st0
		fstp tword [ebp-0x5c]
		fld tword [ebp-0x5c]
		fld tword [ebp-0x74]
		faddp st1, st0
		fstp tword [ebp-0x5c]
.95:		mov edx, [ebp-0x24]
		mov eax, [ebp-0x18]
		add eax, edx
		and eax, 0x7ff
		cmp [ebp-0x28], eax
		je near .97
		mov edx, [ebp-0x24]
		mov eax, [ebp-0x18]
		add eax, edx
		and eax, 0x7ff
		mov eax, [ebp+eax*0x4-0x20b4]
		mov [ebp-0x98], eax
		cmp dword [ebp-0x98], 0x1dcd64ff
		ja .98
		cmp dword [ebp-0x98], byte 0x0
		jne .99
		mov edx, [ebp-0x24]
		mov eax, [ebp-0x18]
		add eax, edx
		inc eax
		and eax, 0x7ff
		cmp [ebp-0x28], eax
		je .98
.99:		fild dword [ebx+0x8]
		fld qword [const7]
		fmulp st1, st0
		fld tword [ebp-0x68]
		faddp st1, st0
		fstp tword [ebp-0x68]
		jmp short .100
.98:		cmp dword [ebp-0x98], 0x1dcd6500
		jbe .101
		fild dword [ebx+0x8]
		fld qword [const8]
		fmulp st1, st0
		fld tword [ebp-0x68]
		faddp st1, st0
		fstp tword [ebp-0x68]
		jmp short .100
.101:		cmp dword [ebp-0x98], 0x1dcd6500
		jne .100
		mov edx, [ebp-0x24]
		mov eax, [ebp-0x18]
		add eax, edx
		inc eax
		and eax, 0x7ff
		cmp [ebp-0x28], eax
		jne .102
		fild dword [ebx+0x8]
		fld qword [const9]
		fmulp st1, st0
		fld tword [ebp-0x68]
		faddp st1, st0
		fstp tword [ebp-0x68]
		jmp short .100
.102:		fild dword [ebx+0x8]
		fld qword [const8]
		fmulp st1, st0
		fld tword [ebp-0x68]
		faddp st1, st0
		fstp tword [ebp-0x68]
.100:		mov eax, 0x40
		sub eax, [ebp-0x14]
		cmp eax, byte 0x1
		jle .97
		fld1
		lea esp, [esp-0xc]
		fstp tword [esp]
		push dword [ebp-0x60]
		push dword [ebp-0x64]
		push dword [ebp-0x68]
		call my_fmodl
		add esp, byte 0x18
		fldz
		fxch st1
		fucompp
		fnstsw ax
		and ah, 0x45
		xor ah, 0x40
		jne .97
		fld tword [ebp-0x68]
		fld1
		faddp st1, st0
		fstp tword [ebp-0x68]
.97:		fld tword [ebp-0x5c]
		fld tword [ebp-0x68]
		faddp st1, st0
		fstp tword [ebp-0x5c]
		fld tword [ebp-0x5c]
		fld tword [ebp-0x74]
		fsubp st1, st0
		fstp tword [ebp-0x5c]
		mov eax, [ebp-0x4c]
		add eax, byte 0x40
		cmp eax, 0x3ffb
		jle near .103
		fld tword [ebp-0x5c]
		fstp tword [ebp-0xb4]
		fld tword [ebp-0xb4]
		fabs
		fld tword [const10]
		fxch st1
		fucompp
		fnstsw ax
		test ah, 0x5
		jne .105
		cmp dword [ebp-0x50], byte 0x0
		je .107
		mov eax, [ebp-0x4c]
		add eax, 0x407d
		cmp [ebp-0x14], eax
		jne .107
		mov dword [ebp-0x50], 0x0
.107:		fld tword [ebp-0x5c]
		fld tword [const11]
		fmulp st1, st0
		fstp tword [ebp-0x5c]
		inc dword [ebp-0x4c]
.105:		mov eax, [ebp-0x4c]
		add eax, byte 0x40
		cmp eax, 0x4000
		jg .116
		cmp dword [ebp-0x50], byte 0x0
		je .103
		fldz
		fld tword [ebp-0x68]
		fucompp
		fnstsw ax
		and ah, 0x45
		xor ah, 0x40
		jne .116
.103:		mov eax, [ebp-0x4c]
		push eax
		push dword [ebp-0x54]
		push dword [ebp-0x58]
		push dword [ebp-0x5c]
		call my_ldexpl
		add esp, byte 0x10
.108:		lea esp, [ebp-0x10]
		pop ecx
		pop ebx
		pop esi
		pop edi
		pop ebp
		lea esp, [ecx-0x4]
		ret

hexfloat:  ; static long double hexfloat(struct sfile *f, int sign);
		lea ecx, [esp+0x4]
		and esp, byte -0x8  ; !! TODO(pts) Don't align.
		push dword [ecx-0x4]
		push ebp
		mov ebp, esp
		push edi
		push esi
		push ebx
		push ecx
		sub esp, byte 0x68
		mov ebx, ecx
		mov dword [ebp-0x14], 0x40
		mov dword [ebp-0x18], 0x0
		fldz
		fstp tword [ebp-0x24]
		fld1
		fstp tword [ebp-0x30]
		fldz
		fstp tword [ebp-0x3c]
		mov dword [ebp-0x40], 0x0
		mov dword [ebp-0x44], 0x0
		mov dword [ebp-0x48], 0x0
		mov dword [ebp-0x50], 0x0
		mov dword [ebp-0x4c], 0x0
		mov dword [ebp-0x58], 0x0
		mov dword [ebp-0x54], 0x0
		mov dword [ebp-0x60], 0x0
		mov dword [ebp-0x5c], 0x0
		mov eax, [ebx]
		mov eax, [eax]
		lea ecx, [eax+0x1]
		mov edx, [ebx]
		mov [edx], ecx
		mov al, [eax]
		movsx eax, al
		mov [ebp-0x68], eax
		jmp short .121
.122:		mov dword [ebp-0x48], 0x1
		mov eax, [ebx]
		mov eax, [eax]
		lea ecx, [eax+0x1]
		mov edx, [ebx]
		mov [edx], ecx
		mov al, [eax]
		movsx eax, al
		mov [ebp-0x68], eax
.121:		cmp dword [ebp-0x68], byte 0x30
		je .122
		cmp dword [ebp-0x68], byte 0x2e
		jne near .126
		mov dword [ebp-0x44], 0x1
		mov eax, [ebx]
		mov eax, [eax]
		lea ecx, [eax+0x1]
		mov edx, [ebx]
		mov [edx], ecx
		mov al, [eax]
		movsx eax, al
		mov [ebp-0x68], eax
		mov dword [ebp-0x50], 0x0
		mov dword [ebp-0x4c], 0x0
		jmp short .124
.125:		mov dword [ebp-0x48], 0x1
		mov eax, [ebx]
		mov eax, [eax]
		lea ecx, [eax+0x1]
		mov edx, [ebx]
		mov [edx], ecx
		mov al, [eax]
		movsx eax, al
		mov [ebp-0x68], eax
		add dword [ebp-0x50], byte -0x1
		adc dword [ebp-0x4c], byte -0x1
.124:		cmp dword [ebp-0x68], byte 0x30
		je .125
		jmp near .126
.138:		cmp dword [ebp-0x68], byte 0x2e
		jne .127
		cmp dword [ebp-0x44], byte 0x0
		jne near .172
		mov eax, [ebp-0x58]
		mov edx, [ebp-0x54]
		mov [ebp-0x50], eax
		mov [ebp-0x4c], edx
		mov dword [ebp-0x44], 0x1
		jmp near .130
.127:		mov dword [ebp-0x48], 0x1
		cmp dword [ebp-0x68], byte 0x39
		jle .131
		mov eax, [ebp-0x68]
		or eax, byte 0x20
		sub eax, byte 0x57
		mov [ebp-0x64], eax
		jmp short .132
.131:		mov eax, [ebp-0x68]
		sub eax, byte 0x30
		mov [ebp-0x64], eax
.132:		cmp dword [ebp-0x54], byte 0x0
		jg .133
		cmp dword [ebp-0x54], byte 0x0
		js .164
		cmp dword [ebp-0x58], byte 0x7
		ja .133
.164:		mov eax, [ebp-0x18]
		sal eax, 0x4
		mov edx, eax
		mov eax, [ebp-0x64]
		add eax, edx
		mov [ebp-0x18], eax
		jmp short .135
.133:		cmp dword [ebp-0x54], byte 0x0
		jg .136
		cmp dword [ebp-0x54], byte 0x0
		js .165
		cmp dword [ebp-0x58], byte 0x10
		ja .136
.165:		fild dword [ebp-0x64]
		fld tword [ebp-0x30]
		fld tword [const12]
		fdivp st1, st0
		fstp tword [ebp-0x30]
		fld tword [ebp-0x30]
		fmulp st1, st0
		fld tword [ebp-0x24]
		faddp st1, st0
		fstp tword [ebp-0x24]
		jmp short .135
.136:		cmp dword [ebp-0x64], byte 0x0
		je .135
		cmp dword [ebp-0x40], byte 0x0
		jne .135
		fld tword [ebp-0x30]
		fld tword [const11]
		fmulp st1, st0
		fld tword [ebp-0x24]
		faddp st1, st0
		fstp tword [ebp-0x24]
		mov dword [ebp-0x40], 0x1
.135:		add dword [ebp-0x58], byte 0x1
		adc dword [ebp-0x54], byte 0x0
.130:		mov eax, [ebx]
		mov eax, [eax]
		lea ecx, [eax+0x1]
		mov edx, [ebx]
		mov [edx], ecx
		mov al, [eax]
		movsx eax, al
		mov [ebp-0x68], eax
.126:		mov eax, [ebp-0x68]
		sub eax, byte 0x30
		cmp eax, byte 0x9
		jbe .138
		mov eax, [ebp-0x68]
		or eax, byte 0x20
		sub eax, byte 0x61
		cmp eax, byte 0x5
		jbe .138
		cmp dword [ebp-0x68], byte 0x2e
		je .138
		jmp short .129
.172:
.129:		cmp dword [ebp-0x48], byte 0x0
		jne .139
		mov eax, [ebx]
		mov eax, [eax]
		lea edx, [eax-0x1]
		mov eax, [ebx]
		mov [eax], edx
		mov eax, [ebx]
		mov eax, [eax]
		lea edx, [eax-0x1]
		mov eax, [ebx]
		mov [eax], edx
		cmp dword [ebp-0x44], byte 0x0
		je .140
		mov eax, [ebx]
		mov eax, [eax]
		lea edx, [eax-0x1]
		mov eax, [ebx]
		mov [eax], edx
.140:		fild dword [ebx+0x4]
		fldz
		fmulp st1, st0
		jmp near .141
.139:		cmp dword [ebp-0x44], byte 0x0
		jne .143
		mov eax, [ebp-0x58]
		mov edx, [ebp-0x54]
		mov [ebp-0x50], eax
		mov [ebp-0x4c], edx
		jmp short .143
.144:		sal dword [ebp-0x18], 0x4
		add dword [ebp-0x58], byte 0x1
		adc dword [ebp-0x54], byte 0x0
.143:		cmp dword [ebp-0x54], byte 0x0
		js .144
		cmp dword [ebp-0x54], byte 0x0
		jg .166
		cmp dword [ebp-0x58], byte 0x7
		jbe .144
.166:		mov eax, [ebp-0x68]
		or eax, byte 0x20
		cmp eax, byte 0x70
		jne .146
		push dword [ebx]
		call scanexp
		add esp, byte 0x4
		cdq
		mov [ebp-0x60], eax
		mov [ebp-0x5c], edx
		jmp short .147
.146:		mov eax, [ebx]
		mov eax, [eax]
		lea edx, [eax-0x1]
		mov eax, [ebx]
		mov [eax], edx
.147:		mov eax, [ebp-0x50]
		mov edx, [ebp-0x4c]
		add eax, byte -0x8
		adc edx, byte -0x1
		mov esi, eax
		mov edi, edx
		mov eax, esi
		mov edx, edi
		shld dword edx, eax, 0x2
		add eax, eax
		add eax, eax
		add [ebp-0x60], eax
		adc [ebp-0x5c], edx
		cmp dword [ebp-0x18], byte 0x0
		jne .148
		fild dword [ebx+0x4]
		fldz
		fmulp st1, st0
		jmp near .141
.148:		cmp dword [ebp-0x5c], byte 0x0
		js .149
		cmp dword [ebp-0x5c], byte 0x0
		jg .167
		cmp dword [ebp-0x60], 0x403d
		jbe .149
.167:		set_errno 0x22
		fild dword [ebx+0x4]
		fld tword [const3]
		fmulp st1, st0
		fld tword [const3]
		fmulp st1, st0
		jmp near .141
.149:		cmp dword [ebp-0x5c], byte -0x1
		jg near .153
		cmp dword [ebp-0x5c], byte -0x1
		jl .168
		cmp dword [ebp-0x60], -0x40bd
		jnb .153
.168:		set_errno 0x22
		fild dword [ebx+0x4]
		fld tword [const4]
		fmulp st1, st0
		fld tword [const4]
		fmulp st1, st0
		jmp near .141
.157:		fld tword [const11]
		fld tword [ebp-0x24]
		fucompp
		fnstsw ax
		test ah, 0x5
		jne .171
		mov eax, [ebp-0x18]
		add eax, eax
		inc eax
		mov [ebp-0x18], eax
		fld tword [ebp-0x24]
		fld1
		fsubp st1, st0
		fld tword [ebp-0x24]
		faddp st1, st0
		fstp tword [ebp-0x24]
		jmp short .156
.171:		mov eax, [ebp-0x18]
		add eax, eax
		mov [ebp-0x18], eax
		fld tword [ebp-0x24]
		fadd st0
		fstp tword [ebp-0x24]
.156:		add dword [ebp-0x60], byte -0x1
		adc dword [ebp-0x5c], byte -0x1
.153:		mov eax, [ebp-0x18]
		test eax, eax
		jns .157
		mov eax, [ebp-0x14]
		cdq
		mov esi, [ebp-0x60]
		mov edi, [ebp-0x5c]
		add esi, 0x405d
		adc edi, byte 0x0
		cmp edx, edi
		jl .158
		cmp edx, edi
		jg .170
		cmp eax, esi
		jbe .158
.170:		mov eax, [ebp-0x60]
		add eax, 0x405d
		mov [ebp-0x14], eax
		cmp dword [ebp-0x14], byte 0x0
		jns .158
		mov dword [ebp-0x14], 0x0
.158:		cmp dword [ebp-0x14], byte 0x3f
		jg .160
		mov eax, 0x5f
		sub eax, [ebp-0x14]
		push eax
		fld1
		lea esp, [esp-0xc]
		fstp tword [esp]
		call my_ldexpl
		add esp, byte 0x10
		fstp tword [ebp-0x78]
		mov eax, [ebp-0x78]
		mov edx, [ebp-0x74]
		mov ecx, [ebp-0x70]
		mov [ebp-0x3c], eax
		mov [ebp-0x38], edx
		mov [ebp-0x34], ecx
		cmp dword [ebx+0x4], byte 0x0
		jns .160
		fld tword [ebp-0x3c]
		fchs
		fstp tword [ebp-0x3c]
.160:		cmp dword [ebp-0x14], byte 0x1f
		jg .161
		fldz
		fld tword [ebp-0x24]
		fucompp
		fnstsw ax
		and ah, 0x45
		cmp ah, 0x40
		je .161
		mov eax, [ebp-0x18]
		and eax, byte 0x1
		test eax, eax
		jne .161
		inc dword [ebp-0x18]
		fldz
		fstp tword [ebp-0x24]
.161:		fild dword [ebx+0x4]
		mov eax, [ebp-0x18]
		mov edx, 0x0
		mov [ebp-0x78], eax
		mov [ebp-0x74], edx
		fild qword [ebp-0x78]
		fmulp st1, st0
		fld tword [ebp-0x3c]
		faddp st1, st0
		fild dword [ebx+0x4]
		fld tword [ebp-0x24]
		fmulp st1, st0
		faddp st1, st0
		fstp tword [ebp-0x24]
		fld tword [ebp-0x24]
		fld tword [ebp-0x3c]
		fsubp st1, st0
		fstp tword [ebp-0x24]
		fldz
		fld tword [ebp-0x24]
		fucompp
		fnstsw ax
		and ah, 0x45
		cmp ah, 0x40
		je .162
		mov eax, [ebp-0x60]
		push eax
		push dword [ebp-0x1c]
		push dword [ebp-0x20]
		push dword [ebp-0x24]
		call my_ldexpl
		add esp, byte 0x10
		fstp tword [ebp-0x78]
		mov eax, [ebp-0x78]
		mov edx, [ebp-0x74]
		mov ecx, [ebp-0x70]
		mov [ebp-0x24], eax
		mov [ebp-0x20], edx
		mov [ebp-0x1c], ecx
		jmp short .163
.162:		set_errno 0x22
.163:		fld tword [ebp-0x24]
.141:		lea esp, [ebp-0x10]
		pop ecx
		pop ebx
		pop esi
		pop edi
		pop ebp
		lea esp, [ecx-0x4]
		ret

mini_strtold:  ; long double mini_strtold(const char *s, char **p);
		push ebp
		mov ebp, esp
		sub esp, byte 0x2c
		mov eax, [ebp+0x8]
		mov [ebp-0x20], eax
		mov eax, [ebp+0x8]
		mov [ebp-0x1c], eax
		mov dword [ebp-0x10], 0x1
.174:		mov eax, [ebp-0x20]
		lea edx, [eax+0x1]
		mov [ebp-0x20], edx
		mov al, [eax]
		movsx eax, al
		mov [ebp-0x18], eax
		cmp dword [ebp-0x18], byte 0x20
		je .174
		mov eax, [ebp-0x18]
		sub eax, byte 0x9
		cmp eax, byte 0x4
		jbe .174
		cmp dword [ebp-0x18], byte 0x2b
		je .175
		cmp dword [ebp-0x18], byte 0x2d
		jne .176
.175:		cmp dword [ebp-0x18], byte 0x2d  ; TODO(pts): Optimize this comparison after the previous one.
		jne .177
		mov dword [ebp-0x10], -0x1
.177:		mov eax, [ebp-0x20]
		lea edx, [eax+0x1]
		mov [ebp-0x20], edx
		mov al, [eax]
		movsx eax, al
		mov [ebp-0x18], eax
.176:		mov dword [ebp-0x14], 0x0
		jmp short .178
.181:		cmp dword [ebp-0x14], byte 0x6
		ja .179
		mov eax, [ebp-0x20]
		lea edx, [eax+0x1]
		mov [ebp-0x20], edx
		mov al, [eax]
		movsx eax, al
		mov [ebp-0x18], eax
.179:		inc dword [ebp-0x14]
.178:		cmp dword [ebp-0x14], byte 0x7
		ja .180
		mov eax, [ebp-0x18]
		or eax, byte 0x20
		mov edx, eax
		mov eax, [ebp-0x14]
		add eax, str_infinity
		mov al, [eax]
		movsx eax, al
		cmp edx, eax
		je .181
.180:		cmp dword [ebp-0x14], byte 0x3
		je .182
		cmp dword [ebp-0x14], byte 0x8
		je .182
		cmp dword [ebp-0x14], byte 0x3
		jbe .183
.182:		cmp dword [ebp-0x14], byte 0x8
		je .184
		mov eax, [ebp-0x20]
		dec eax
		mov [ebp-0x20], eax
		jmp short .185
.186:		mov eax, [ebp-0x20]
		dec eax
		mov [ebp-0x20], eax
		dec dword [ebp-0x14]
.185:		cmp dword [ebp-0x14], byte 0x3
		ja .186
.184:		fild dword [ebp-0x10]
		fld dword [const14]
		fmulp st1, st0
		fstp tword [ebp-0xc]
		jmp near .187
.183:		cmp dword [ebp-0x14], byte 0x0
		jne .188
		mov dword [ebp-0x14], 0x0
		jmp short .189
.191:		cmp dword [ebp-0x14], byte 0x1
		ja .190
		mov eax, [ebp-0x20]
		lea edx, [eax+0x1]
		mov [ebp-0x20], edx
		mov al, [eax]
		movsx eax, al
		mov [ebp-0x18], eax
.190:		inc dword [ebp-0x14]
.189:		cmp dword [ebp-0x14], byte 0x2
		ja .188
		mov eax, [ebp-0x18]
		or eax, byte 0x20
		mov edx, eax
		mov eax, [ebp-0x14]
		add eax, str_nan
		mov al, [eax]
		movsx eax, al
		cmp edx, eax
		je .191
.188:		cmp dword [ebp-0x14], byte 0x3
		jne near .192
		mov eax, [ebp-0x20]
		lea edx, [eax+0x1]
		mov [ebp-0x20], edx
		mov al, [eax]
		cmp al, 0x28
		je .193
		mov eax, [ebp-0x20]
		dec eax
		mov [ebp-0x20], eax
		jmp short .194
.193:		mov dword [ebp-0x14], 0x1
.197:		mov eax, [ebp-0x20]
		lea edx, [eax+0x1]
		mov [ebp-0x20], edx
		mov al, [eax]
		movsx eax, al
		mov [ebp-0x18], eax
		mov eax, [ebp-0x18]
		sub eax, byte 0x30
		cmp eax, byte 0x9
		jbe .195
		mov eax, [ebp-0x18]
		sub eax, byte 0x41
		cmp eax, byte 0x19
		jbe .195
		mov eax, [ebp-0x18]
		sub eax, byte 0x61
		cmp eax, byte 0x19
		jbe .195
		cmp dword [ebp-0x18], byte 0x5f
		jne .196
.195:		inc dword [ebp-0x14]
		jmp short .197
.196:		cmp dword [ebp-0x18], byte 0x29
		je .206
		mov eax, [ebp-0x20]
		dec eax
		mov [ebp-0x20], eax
		jmp short .199
.200:		mov eax, [ebp-0x20]
		dec eax
		mov [ebp-0x20], eax
.199:		mov eax, [ebp-0x14]
		lea edx, [eax-0x1]
		mov [ebp-0x14], edx
		test eax, eax
		jne .200
		jmp short .194
.206:
.194:		fld tword [const16]
		fstp tword [ebp-0xc]
		jmp near .187
.192:		cmp dword [ebp-0x14], byte 0x0
		je .201
		mov eax, [ebp-0x20]
		dec eax
		mov [ebp-0x20], eax
		set_errno 0x16
		mov eax, [ebp-0x1c]
		mov [ebp-0x20], eax
		fldz
		fstp tword [ebp-0xc]
		jmp near .187
.201:		cmp dword [ebp-0x18], byte 0x30
		jne .207
		mov eax, [ebp-0x20]
		lea edx, [eax+0x1]
		mov [ebp-0x20], edx
		mov al, [eax]
		movsx eax, al
		mov [ebp-0x18], eax
		mov eax, [ebp-0x18]
		or eax, byte 0x20
		cmp eax, byte 0x78
		je .203
		mov eax, [ebp-0x20]
		dec eax
		mov [ebp-0x20], eax
		mov dword [ebp-0x18], 0x30
		jmp short .202
.203:		push dword [ebp-0x10]
		lea eax, [ebp-0x20]
		push eax
		call hexfloat
		add esp, byte 0x8
		fstp tword [ebp-0x2c]
		mov eax, [ebp-0x2c]
		mov edx, [ebp-0x28]
		mov ecx, [ebp-0x24]
		mov [ebp-0xc], eax
		mov [ebp-0x8], edx
		mov [ebp-0x4], ecx
		jmp short .187
.207:
.202:		push dword [ebp-0x10]
		push dword [ebp-0x18]
		lea eax, [ebp-0x20]
		push eax
		call decfloat
		add esp, byte 0xc
		fstp tword [ebp-0x2c]
		mov eax, [ebp-0x2c]
		mov edx, [ebp-0x28]
		mov ecx, [ebp-0x24]
		mov [ebp-0xc], eax
		mov [ebp-0x8], edx
		mov [ebp-0x4], ecx
.187:		cmp dword [ebp+0xc], byte 0x0
		je .204
		mov edx, [ebp-0x20]
		mov eax, [ebp+0xc]
		mov [eax], edx
.204:		fld tword [ebp-0xc]
		leave
		ret

section .rodata
p10s.989:	dd 0xa, 0x64, 0x3e8, 0x2710, 0x186a0, 0xf4240, 0x989680, 0x5f5e100
th.972:		dd 0x12, 0x1aa0c609, 0x2a4ae5ff
const3:		dd 0xffffffff, 0xffffffff, 0x7ffe
const4:		dd 0x0, 0x80000000, 0x1
const5:		dd 0x0, 0xee6b2800, 0x401c
const7:		dd 0x0, 0x3fd00000
const8:		dd 0x0, 0x3fe80000
const9:		dd 0x0, 0x3fe00000
const10:	dd 0x0, 0x80000000, 0x403f
const11:	dd 0x0, 0x80000000, 0x3ffe
const12:	dd 0x0, 0x80000000, 0x4003
const14:	dd 0x7f800000
const16:	dd 0x0, 0xc0000000, 0x7fff

str_infinity:	db 'infinity', 0
str_nan:	db 'nan', 0

%ifdef CONFIG_PIC
%error Not PIC because it uses global constants.
times 1/0 nop
%endif

; __END__
